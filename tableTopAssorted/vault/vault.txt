# bashrc
nano ~/.bashrc
export VAULT_ADDR="https://10.5.0.100:8200"
export VAULT_CACERT="/home/n1/Desktop/tableTopSecrets/ca.pem"

# Unseal vault
vault operator unseal

# Generate 128 character password
openssl rand -base64 96 | tr -d '\n' | cut -c1-128

# Convert password to url safe password
printf '%s' 'p@ssword' | python3 -c "import sys,urllib.parse; pwd=sys.stdin.read().rstrip('\n'); print(urllib.parse.quote(pwd, safe=''))"

# Upload secret to kv2
vault kv put kv/myapp secret='secret'

# Create policy
vault policy write policy policy.hcl

# Create policy token
vault token create -policy="policy" -ttl="24h"

// Remake certs
sudo openssl req -new -nodes \
  -out .csr \
  -keyout .key \
  -config .cnf

# 2. Sign the CSR to produce the cert
sudo openssl x509 -req \
  -in .csr \
  -CA /home/n1/Desktop/tableTopSecrets/ca.pem -CAkey /home/n1/Desktop/tableTopSecrets/ca.key -CAcreateserial \
  -out .crt \
  -extensions req_ext -extfile .cnf \
  -days 365
  
# 3. Concatenate key+cert into the single file MongoDB expects
cat .crt .key > .pem

# 4. dhparam
openssl dhparam -out dhparam.pem 4096

vault kv put kv/vaultServer/table-top-vault-server.crt content="$(< ./table-top-vault-server.crt)"
vault kv put kv/vaultServer/table-top-vault-server.cnf content="$(< ./table-top-vault-server.cnf)"
vault kv put kv/vaultServer/table-top-vault-server.key content="$(< ./table-top-vault-server.key)"
vault kv put kv/vaultServer/table-top-vault-server.csr content="$(< ./table-top-vault-server.csr)"
vault kv put kv/vaultServer/table-top-vault-server-nginx.crt content="$(< ./table-top-vault-server-nginx.crt)"
vault kv put kv/vaultServer/table-top-vault-server-nginx.cnf content="$(< ./table-top-vault-server-nginx.cnf)"
vault kv put kv/vaultServer/table-top-vault-server-nginx.key content="$(< ./table-top-vault-server-nginx.key)"
vault kv put kv/vaultServer/table-top-vault-server-nginx.csr content="$(< ./table-top-vault-server-nginx.csr)"
