// Create ca config
sudo nano ca.cnf
[ req ]
default_bits       = 4096
distinguished_name = dn
x509_extensions    = v3_ca
prompt             = no

[ dn ]
C  = US
ST = FL
L  = CNTL
O  = tableTopCA
CN = TableTop Root CA

[ v3_ca ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

// Create ca key
openssl genrsa -aes256 -out ca.key 4096

// Create ca password
openssl rand -base64 96 | tr -d '\n' | cut -c1-128
sudo nano password.tmp

// Create ca certificate
sudo openssl req -new -x509 -days 3650 -key ca.key -out ca.crt -config ca.cnf

// Make ca pem certificate copy
sudo cp ca.crt ca.pem

// Make hashi tls certs
sudo nano vault.cnf
[ req ]
default_bits       = 4096
distinguished_name = DN
req_extensions     = req_ext
prompt             = no

[ DN ]
C  = US
ST = FL       
L  = CNTL
O  = TableTop
OU = vault
CN = 10.5.0.100

[ req_ext ]
subjectAltName = @alt_names
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth

[ alt_names ]
IP.1 = 10.5.0.100
DNS.1 = n1.admin

sudo openssl req -new -nodes \
  -out vault.csr \
  -keyout vault.key \
  -config vault.cnf

sudo openssl x509 -req \
  -in vault.csr \
  -CA /home/n1/Desktop/tableTopSecrets/ca.pem -CAkey /home/n1/Desktop/tableTopSecrets/ca.key -CAcreateserial \
  -out vault.crt \
  -extensions req_ext -extfile vault.cnf \
  -days 365

// Place hashi vault certifcates in the correct spots
su -
cd /opt/vault/tls
// Copy from whatever tmp folder they were made in
sudo cp /home/n1/Desktop/tableTopNexus/assorted/tmp2/vault.crt ./
sudo cp /home/n1/Desktop/tableTopNexus/assorted/tmp2/vault.key ./
sudo chown vault:vault ./*
ls -l

// Upload copies to vault for safe keeping
vault kv put kv/vault/vault.crt content="$(< ./vault.crt)"
vault kv put kv/vault/vault.cnf content="$(< ./vault.cnf)"
vault kv put kv/vault/vault.key content="$(< ./vault.key)"
vault kv put kv/vault/vault.csr content="$(< ./vault.csr)"

vault kv put kv/tableTop/ca/ca.crt content="$(< ./ca.crt)"
vault kv put kv/tableTop/ca/ca.cnf content="$(< ./ca.cnf)"
vault kv put kv/tableTop/ca/ca.key content="$(< ./ca.key)"
vault kv put kv/tableTop/ca/ca.csr content="$(< ./ca.csr)"
vault kv put kv/tableTop/ca/ca.srl content="$(< ./ca.srl)"
vault kv put kv/tableTop/ca/password password="$(< ./password.tmp)"

// Create vault server certs
sudo nano table-top-vault-server.cnf
[ req ]
default_bits       = 4096
distinguished_name = DN
req_extensions     = req_ext
prompt             = no

[ DN ]
C  = US
ST = FL       
L  = CNTL
O  = TableTop
OU = VaultServer
CN = 10.5.0.100

[ req_ext ]
subjectAltName = @alt_names
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth, clientAuth

[ alt_names ]
IP.1 = 10.5.0.100
DNS.1 = n1.admin

sudo openssl req -new -nodes \
  -out table-top-vault-server.csr \
  -keyout table-top-vault-server.key \
  -config table-top-vault-server.cnf

sudo openssl x509 -req \
  -in table-top-vault-server.csr \
  -CA /home/n1/Desktop/tableTopSecrets/ca.pem -CAkey /home/n1/Desktop/tableTopSecrets/ca.key -CAcreateserial \
  -out table-top-vault-server.crt \
  -extensions req_ext -extfile table-top-vault-server.cnf \
  -days 365

openssl dhparam -out table-top-vault-server-dhparam.pem 4096

sudo nano table-top-vault-server-nginx.cnf
[ req ]
default_bits       = 4096
distinguished_name = DN
req_extensions     = req_ext
prompt             = no

[ DN ]
C  = US
ST = FL       
L  = CNTL
O  = TableTop
OU = VaultServerNginx
CN = 10.5.0.100

[ req_ext ]
subjectAltName = @alt_names
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth, clientAuth

[ alt_names ]
IP.1 = 10.5.0.100
DNS.1 = n1.admin

sudo openssl req -new -nodes \
  -out table-top-vault-server-nginx.csr \
  -keyout table-top-vault-server-nginx.key \
  -config table-top-vault-server-nginx.cnf

sudo openssl x509 -req \
  -in table-top-vault-server-nginx.csr \
  -CA /home/n1/Desktop/tableTopSecrets/ca.pem -CAkey /home/n1/Desktop/tableTopSecrets/ca.key -CAcreateserial \
  -out table-top-vault-server-nginx.crt \
  -extensions req_ext -extfile table-top-vault-server-nginx.cnf \
  -days 365

openssl dhparam -out table-top-vault-server-dhparam-nginx.pem 4096

// Make sure ownership is such that they can be uploaded to vault
sudo chown n1:n1 ./*

// Upload certs to vault
vault kv put kv/vaultServer/table-top-vault-server.crt content="$(< ./table-top-vault-server.crt)"
vault kv put kv/vaultServer/table-top-vault-server.cnf content="$(< ./table-top-vault-server.cnf)"
vault kv put kv/vaultServer/table-top-vault-server.key content="$(< ./table-top-vault-server.key)"
vault kv put kv/vaultServer/table-top-vault-server.csr content="$(< ./table-top-vault-server.csr)"
vault kv put kv/vaultServer/table-top-vault-server-dhparam.pem content="$(< ./table-top-vault-server-dhparam.pem)"
vault kv put kv/vaultServer/table-top-vault-server-nginx.crt content="$(< ./table-top-vault-server-nginx.crt)"
vault kv put kv/vaultServer/table-top-vault-server-nginx.cnf content="$(< ./table-top-vault-server-nginx.cnf)"
vault kv put kv/vaultServer/table-top-vault-server-nginx.key content="$(< ./table-top-vault-server-nginx.key)"
vault kv put kv/vaultServer/table-top-vault-server-nginx.csr content="$(< ./table-top-vault-server-nginx.csr)"
vault kv put kv/vaultServer/table-top-vault-server-dhparam-nginx.pem content="$(< ./table-top-vault-server-dhparam-nginx.pem)"

// Create pki
// Default lease 1 day
// Max lease 1 day
// Decrypt ca key so it can be stored in pki issuer without error
openssl rsa -in ca.key -out ca.key.decrypted
cat ca.key.decrypted ca.crt > tmp-bundle.pem
shred -u ca.key.decrypted tmp-bundle.pem

// Policies
sudo nano admin-vault-server-access
path "kv/data/vaultServer/nginx-internal-token" {
  capabilities = ["read"]
}

path "kv/data/vaultServer/table-top-vault-server.key" {
  capabilities = ["read"]
}

path "kv/data/vaultServer/table-top-vault-server-nginx.key" {
  capabilities = ["read"]
}

path "kv/data/vaultServer/table-top-vault-server.crt" {
  capabilities = ["read"]
}

path "kv/data/vaultServer/table-top-vault-server-nginx.crt" {
  capabilities = ["read"]
}

path "kv/data/vaultServer/table-top-vault-server-dhparam.pem" {
  capabilities = ["read"]
}

path "kv/data/vaultServer/table-top-vault-server-dhparam-nginx.pem" {
  capabilities = ["read"]
}

path "kv/data/tableTop/ca.pem" {
  capabilities = ["read"]
}

vault policy write admin-vault-server-access admin-vault-server-access.hcl

sudo nano vault-server-access
# Allow validating own token
path "auth/token/lookup-self" {
  capabilities = ["read"]
}

# Allow minting tokens with arbitrary policies
path "auth/token/create" {
  capabilities = ["create", "update", "sudo"]
}

# Allow reading AppRole role IDs for mongo-* roles
path "auth/approle/role/mongo-*/role-id" {
  capabilities = ["read"]
}

# Allow generating secret IDs
path "auth/approle/role/mongo-*/secret-id" {
  capabilities = ["update"]
}

vault policy write vault-server-access vault-server-access.hcl

sudo nano mongo-ansible-access
path "sys/policies/acl/*" {
  capabilities = ["create", "update", "read", "delete", "list"]
}

path "auth/approle/role/*" {
  capabilities = ["create", "read", "update", "delete", "list"]
}

path "kv/data/mongo/admin" {
  capabilities = ["read"]
}

path "kv/data/tableTop/ca/ca.pem" {
  capabilities = ["read"]
}

path "kv/data/tableTop/ca/ca.key" {
  capabilities = ["read"]
}

path "kv/data/mongo/" {
  capabilities = ["list"]
}

path "kv/data/mongo/*" {
  capabilities = ["create", "update", "delete", "list"]
}

path "kv/metadata/mongo/*" {
  capabilities = ["delete", "list"]
}

path "kv/data/mongos/" {
  capabilities = ["list"]
}

path "kv/data/mongos/*" {
  capabilities = ["create", "update", "delete", "list"]
}

path "kv/metadata/mongos/*" {
  capabilities = ["delete", "list"]
}

# PKI Engine Access
path "pki/roles/*" {
  capabilities = ["create", "update", "read", "list"]
}
path "pki/issue/*" {
  capabilities = ["create", "update", "read", "list"]
}
path "pki/sign/*" {
  capabilities = ["create", "update"]
}
path "pki/revoke" {
  capabilities = ["update"]
}
path "pki/certs/*" {
  capabilities = ["read", "list"]
}
path "pki/issuers" {
  capabilities = ["read", "list"]
}
path "pki/keys/*" {
  capabilities = ["read", "list"]
}

path "pki/config/*" {
  capabilities = ["read", "update"]
}

path "roles/*" {
  capabilities = ["create", "update", "read", "list"]
}

vault policy write mongo-ansible-access mongo-ansible-access.hcl

// Create userpass
User: adminvaultserver
Password: password
Policies: admin-vault-server-access,vault-server-access
