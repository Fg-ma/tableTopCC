- name: Wait for all config-server members to be reachable
  wait_for:
    host: "10.{{ mongo_config_subnet }}.0.{{ hostvars[item].ansible_host.split('.')[-1] }}"
    port: "{{ config_port }}"
    timeout: 120
    delay: 5
    state: started
  loop: "{{ groups['config_servers'] }}"
  ignore_errors: true

- name: Include vault_fetcher role
  include_role:
    name: vault-fetcher
  vars:
    fetcher_secret_var_name: "mongo_admin"
    fetcher_secret_path: "{{ mongo_admin_secret_path }}"
    fetcher_vault_token: "{{ vault_token }}"
    fetcher_vault_url: "{{ vault_url }}"
    fetcher_ca_path: "{{ local_ca_path }}"
    fetcher_engine_version: 2

- name: Initiate replica set
  shell: >
    {{ mongo_base_dir }}/bin/mongosh "mongodb://{{ primary_config_node }}:{{ config_port }}/?tls=true&tlsCAFile={{ vault_dir }}/authorities/ca.pem&tlsCertificateKeyFile={{ vault_dir }}/secrets/mongo/config/mongo-config-10.{{ mongo_config_subnet }}.0.{{ ansible_host.split('.')[-1] }}.pem&directConnection=true"
    --eval 'rs.initiate({ _id: "{{ config_repl_set_name }}", configsvr: true, members: [ { _id: 0, host: "{{ primary_config_node }}:{{ config_port }}", priority: 2 } ] })'
  run_once: true
  register: rs_initiate_result
  failed_when: rs_initiate_result.rc != 0 and '"already initialized"' not in rs_initiate_result.stderr
  become: true
  become_user: "{{ mongo_vault_agent_user }}"
  delegate_to: "{{ primary_config_node }}"

- name: Wait for primary election
  shell: >
    {{ mongo_base_dir }}/bin/mongosh "mongodb://{{ primary_config_node }}:{{ config_port }}/?tls=true&tlsCAFile={{ vault_dir }}/authorities/ca.pem&tlsCertificateKeyFile={{ vault_dir }}/secrets/mongo/config/mongo-config-10.{{ mongo_config_subnet }}.0.{{ ansible_host.split('.')[-1] }}.pem&directConnection=true"
    --quiet --eval 'while(rs.status().myState != 1) { sleep(1000); }'
  run_once: true
  become: true
  become_user: "{{ mongo_vault_agent_user }}"
  delegate_to: "{{ primary_config_node }}"

- name: Build config_members list (skip primary)
  vars:
    ip: "10.{{ mongo_config_subnet }}.0.{{ hostvars[server]['ansible_host'].split('.')[-1] }}"
  set_fact:
    config_members: "{{ config_members | default([]) + [ {'name': server, 'ip': ip} ] }}"
  loop: "{{ groups['config_servers'] }}"
  loop_control:
    loop_var: server
  when: ip != primary_config_node
  run_once: true
  delegate_to: localhost

- name: Add other members to the replica set (idempotent, loop over config_members)
  shell: >
    {{ mongo_base_dir }}/bin/mongosh "mongodb://{{ primary_config_node }}:{{ config_port }}/?replicaSet={{ config_repl_set_name }}&tls=true&tlsCAFile={{ vault_dir }}/authorities/ca.pem&tlsCertificateKeyFile={{ vault_dir }}/secrets/mongo/config/mongo-config-10.{{ mongo_config_subnet }}.0.{{ primary_config_node.split('.')[-1] }}.pem&directConnection=true"
    --eval 'if (!rs.conf().members.some(m => m.host == "{{ item.ip }}:{{ config_port }}")) {
             rs.add({ host: "{{ item.ip }}:{{ config_port }}", priority: 1 });
             print("rs.add -> {{ item.ip }}");
           } else {
             print("skip (exists) -> {{ item.ip }}");
           }'
  loop: "{{ config_members }}"
  run_once: true
  delegate_to: "{{ primary_config_node }}"
  become: true
  become_user: "{{ mongo_vault_agent_user }}"

- name: Disable Mongo telemetry
  shell: >
    {{ mongo_base_dir }}/bin/mongosh "mongodb://{{ primary_config_node }}:{{ config_port }}/?replicaSet={{ config_repl_set_name }}&tls=true&tlsCAFile={{ vault_dir }}/authorities/ca.pem&tlsCertificateKeyFile={{ vault_dir }}/secrets/mongo/config/mongo-config-10.{{ mongo_config_subnet }}.0.{{ ansible_host.split('.')[-1] }}.pem&directConnection=true"
    --eval 'disableTelemetry()'
  run_once: true
  become: true
  become_user: "{{ mongo_vault_agent_user }}"

- name: Create admin user
  shell: >
    {{ mongo_base_dir }}/bin/mongosh "mongodb://{{ primary_config_node }}:{{ config_port }}/?replicaSet={{ config_repl_set_name }}&tls=true&tlsCAFile={{ vault_dir }}/authorities/ca.pem&tlsCertificateKeyFile={{ vault_dir }}/secrets/mongo/config/mongo-config-10.{{ mongo_config_subnet }}.0.{{ ansible_host.split('.')[-1] }}.pem&directConnection=true"
    --eval 'db.getSiblingDB("admin").createUser({ user: "admin", pwd: "{{ mongo_admin.password }}", roles: [ { role: "root", db: "admin" } ] })'
  run_once: true
  become: true
  become_user: "{{ mongo_vault_agent_user }}"
  no_log: true
